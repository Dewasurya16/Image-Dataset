# -*- coding: utf-8 -*-
"""Image Clasisification Dicoding.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DybHQWdoE5MWgJJB6sa6Nruq-maofcT5

# Nama     = *Dewa Sinar Surya*
# Email    =*Dewasinar16@gmail.com*
# Domisili =*Temanggung Jawa Tengah*
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd 
import os
from google.colab import files
from keras.preprocessing import image
import zipfile, os
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
# %matplotlib inline
import tensorflow as tf
from tensorflow.keras.optimizers import RMSprop
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split

!wget https://github.com/dicodingacademy/assets/releases/download/release/rockpaperscissors.zip

local_zip = '/content/rockpaperscissors.zip'
zip = zipfile.ZipFile(local_zip, 'r')
zip.extractall('/tmp')
zip.close()
 
base_dir = '/tmp/rockpaperscissors/rps-cv-images'

file_path = ('/tmp/rockpaperscissors/rps-cv-images')
os.makedirs(file_path, exist_ok=True)

len(os.listdir('/tmp/rockpaperscissors/rock'))

len(os.listdir('/tmp/rockpaperscissors/scissors'))

len(os.listdir('/tmp/rockpaperscissors/paper'))

train_data = ImageDataGenerator(
                    rescale=1./255,
                    rotation_range=20,
                    horizontal_flip=True,
                    shear_range = 0.2,
                    fill_mode = 'wrap',
                    validation_split=0.4)

train_generator = train_data.flow_from_directory(
        base_dir,
        target_size=(100, 150), 
        #class_mode='sparse',
        shuffle=True,
        subset='training')
 
validation_generator = train_data.flow_from_directory(
        base_dir,
        target_size=(100, 150),
        #class_mode='sparse',
        subset='validation')

model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(16, (3,3), activation='relu', input_shape=(100, 150, 3)),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(32, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(512, activation='relu'),
    tf.keras.layers.Dense(3, activation='softmax')
])

model.compile(loss='categorical_crossentropy',
              optimizer=tf.optimizers.Adam(),
              metrics=['accuracy'])

model.fit(
      train_generator,
      steps_per_epoch=32,
      epochs=10,
      validation_data=validation_generator,
      validation_steps=8,
      verbose=2)

uploaded = files.upload()
 
for fn in uploaded.keys():
 
  # predicting images
  path = fn
  img = image.load_img(path, target_size=(100,150,3))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis=0)
 
  images = np.vstack([x])
  classes = model.predict(images, batch_size=15)
  
  print(fn)
  if classes[0][0]==1:
    print('paper')
  elif classes[0][1]==1:
    print('rock')
  elif classes[0][2]==1:
    print('scissors')
  else:
    print('unknown')